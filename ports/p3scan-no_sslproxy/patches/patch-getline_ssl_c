--- getline_ssl.c.orig	Mon Dec 12 17:00:00 2005
+++ getline_ssl.c	Fri Nov 16 17:57:08 2007
@@ -38,7 +38,7 @@
 #include <stdio.h>
 #include <unistd.h>
 #include <string.h>
-#include <malloc.h>
+#include <stdlib.h>
 #include <stdarg.h>
 #include <fcntl.h>
 #include <sys/time.h>
@@ -48,7 +48,6 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <netdb.h>
-#include <stdlib.h>
 #include <sys/wait.h>
 
 #include "getline_ssl.h"
@@ -63,7 +62,7 @@ static int password_cb(char *buf,int num, int rwflag,v
 static int password_cb(char *buf,int num, int rwflag,void *userdata) {
    if(num<strlen(pass)+1) return(0);
 
-   strcpy(buf,pass);
+   strlcpy(buf,pass,num);
    return(strlen(pass));
 }
 
@@ -223,21 +222,22 @@ int getline_ssl(SSL * ssl, struct linebuf * l){
 
 int writeline_ssl(SSL * ssl, int leading, char * c){
    char * out;
-   int len, res;
+   int len, res, size;
 
    if (!c) return GETLINE_ERR;
    //--out=malloc(strlen(c)+3);
-   out=w_malloc(strlen(c)+3);
+   size= strlen(c)+3;
+   out=w_malloc(size);
    switch (leading){
       case WRITELINE_LEADING_NONE:
-         len=sprintf(out, "%s", c);
+         len=snprintf(out, size, "%s", c);
          break;
       case WRITELINE_LEADING_N:
-         len=sprintf(out, "%s\n", c);
+         len=snprintf(out, size, "%s\n", c);
          break;
       case WRITELINE_LEADING_RN:
       default:
-         len=sprintf(out, "%s\r\n", c);
+         len=snprintf(out, size, "%s\r\n", c);
          break;
    }
    res=secure_write_ssl(ssl, out, len);
