$OpenBSD$
Index: src/HTTPHeader.cpp
--- src/HTTPHeader.cpp.orig
+++ src/HTTPHeader.cpp
@@ -1222,10 +1222,13 @@ void HTTPHeader::checkheader(bool allowpersistent)
 
 String HTTPHeader::getLogUrl(bool withport, bool isssl)
 {
-
     String answer = getUrl(withport, isssl);
     if (mitm || isssl) {
-        answer = "https://" + answer.after("://");
+        if (answer.contains("://")) {
+            answer = "https://" + answer.after("://");
+        } else {
+            answer = "https://" + answer;
+        }
     }
     return answer;
 }
@@ -1250,6 +1253,14 @@ String HTTPHeader::getUrl(bool withport, bool isssl)
     } else {
         answer = answer.before(" http/"); // just in case!
     }
+    if (isssl) {
+        https = true;
+        if (answer.startsWith("http://")) {
+            answer = "https://" + answer.after("http://");
+        } else if (!answer.startsWith("https://")) {
+            answer = "https://" + answer;
+        }
+    }
     if (requestType() == "CONNECT") {
         https = true;
         port = 443;
@@ -1284,11 +1295,20 @@ String HTTPHeader::getUrl(bool withport, bool isssl)
             // Squid doesn't like requests in this format. Work around the fact.
             header.front() = requestType() + " " + answer + " HTTP/" + header.front().after(" HTTP/");
         } else { // must be in the form GET http://foo.bar:80/ HTML/1.0
-            if (!answer.after("://").contains("/")) {
-                answer += "/"; // needed later on so correct host is extracted
-            }
             String protocol(answer.before("://"));
-            hostname = answer.after("://");
+            if (answer.contains("://")) {
+                hostname = answer.after("://");
+                if (!answer.after("://").contains("/")) {
+                    answer += "/"; // needed later on so correct host is extracted
+                }
+            } else {
+                protocol = "https";
+                hostname = answer;
+                if (!answer.contains("/")) {
+                    answer += "/"; // needed later on so correct host is extracted
+                }
+            }
+
             String url(hostname.after("/"));
             url.removeWhiteSpace(); // remove rubbish like ^M and blanks
             if (hostname.endsWith(".")) {
@@ -1409,7 +1429,10 @@ String HTTPHeader::getCookie(const char *cookie)
         if (i->startsWithLower("cookie:")) {
             line = i->after(": ");
             if (line.contains(cookie)) { // We know we have the cookie
-                line = line.after(cookie);
+                // There may be multiple cookies, use the last one
+                while (line.contains(cookie)) {
+                    line = line.after(cookie);
+                }
                 line.lop(); // Get rid of the '='
                 if (line.contains(";")) {
                     line = line.before(";");
@@ -1723,6 +1746,23 @@ String HTTPHeader::getReferer()
     std::cout << "Found Referer URL:" << line << " Line: " << __LINE__ << " Function: " << __func__ << std::endl;
 #endif
     return line;
+}
+
+String HTTPHeader::getSSLproxyLine()
+{
+    for (std::deque<String>::iterator i = header.begin(); i != header.end(); i++) {
+        // SSLproxy: [127.0.0.1]:34649,[192.168.3.24]:47286,[74.125.206.108]:465,s
+        if (i->startsWith("SSLproxy:")) {
+            String line = i->after(",[");
+            line.removeWhiteSpace();
+            line = line.before("]") + line.after("]").before(",") + "," + line.after(",").after(",");
+#ifdef DGDEBUG
+            std::cout << "Found SSLproxy header: " << line << std::endl;
+#endif
+            return line;
+        }
+    }
+	return "";
 }
 
 // *
