$OpenBSD$

Index: src/authplugins/ip.cpp
--- src/authplugins/ip.cpp.orig
+++ src/authplugins/ip.cpp
@@ -66,6 +66,30 @@ class ip
     };
 };
 
+class user
+{
+    public:
+    user(std::string u, int g)
+    {
+        name = u;
+        group = g;
+    };
+    std::string name;
+    int group;
+    int operator<(const user &u) const
+    {
+        return name < u.name;
+    };
+    int operator<(const std::string &u) const
+    {
+        return name < u;
+    };
+    int operator==(const std::string &u) const
+    {
+        return u == name;
+    };
+};
+
 // class name is relevant!
 class ipinstance : public AuthPlugin
 {
@@ -90,12 +114,15 @@ class ipinstance : public AuthPlugin
     std::vector<ip> iplist;
     std::list<subnetstruct> ipsubnetlist;
     std::list<rangestruct> iprangelist;
+    std::vector<user> userlist;
 
     int readIPMelangeList(const char *filename);
     int searchList(int a, int s, const uint32_t &ip);
     int inList(const uint32_t &ip);
     int inSubnet(const uint32_t &ip);
     int inRange(const uint32_t &ip);
+    int searchUserList(int a, int s, const std::string &user);
+    int inUserList(const std::string &user);
 };
 
 // IMPLEMENTATION
@@ -143,6 +170,11 @@ int ipinstance::init(void *args)
 // NOUSER stops ConnectionHandler from querying subsequent plugins.
 int ipinstance::identify(Socket &peercon, Socket &proxycon, HTTPHeader &h, std::string &string, bool &is_real_user)
 {
+	// Return ok if we already have a user
+	if (!string.empty()) {
+		return DGAUTH_OK;
+	}
+
     // we don't get usernames out of this plugin, just a filter group
     // for now, use the IP as the username
     bool use_xforwardedfor;
@@ -193,6 +225,14 @@ int ipinstance::determineGroup(std::string &user, int 
 #endif
         return DGAUTH_OK;
     }
+    fg = inUserList(user);
+    if (fg >= 0) {
+        rfg = fg;
+#ifdef DGDEBUG
+        std::cerr << thread_id << "Matched User " << user << " to straight User list" << std::endl;
+#endif
+        return DGAUTH_OK;
+    }
     fg = inSubnet(addr);
     if (fg >= 0) {
         rfg = fg;
@@ -230,6 +270,14 @@ int ipinstance::inList(const uint32_t &ip)
     return -1;
 }
 
+int ipinstance::inUserList(const std::string &user)
+{
+    if (userlist.size() > 0) {
+        return searchUserList(0, userlist.size(), user);
+    }
+    return -1;
+}
+
 // binary search list for given IP & return filter group, or -1 on failure
 int ipinstance::searchList(int a, int s, const uint32_t &ip)
 {
@@ -245,6 +293,20 @@ int ipinstance::searchList(int a, int s, const uint32_
     return searchList(a, m - 1, ip);
 }
 
+int ipinstance::searchUserList(int a, int s, const std::string &user)
+{
+    if (a > s)
+        return -1;
+    int m = (a + s) / 2;
+    if (userlist[m] == user)
+        return userlist[m].group;
+    if (userlist[m] < user)
+        return searchUserList(m + 1, s, user);
+    if (a == s)
+        return -1;
+    return searchUserList(a, m - 1, user);
+}
+
 // search subnet list for given IP & return filter group or -1
 int ipinstance::inSubnet(const uint32_t &ip)
 {
@@ -282,17 +344,19 @@ int ipinstance::readIPMelangeList(const char *filename
     }
 
     // compile regexps for determining whether a list entry is an IP, a subnet (IP + mask), or a range
-    RegExp matchIP, matchSubnet, matchRange, matchCIDR;
+    RegExp matchIP, matchSubnet, matchRange, matchCIDR, matchUser;
 #ifdef HAVE_PCRE
     matchIP.comp("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
     matchSubnet.comp("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
     matchCIDR.comp("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}$");
     matchRange.comp("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}-\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
+    matchUser.comp("^[\\w_.-]{1,31}$");
 #else
     matchIP.comp("^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$");
     matchSubnet.comp("^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$");
     matchCIDR.comp("^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}$");
     matchRange.comp("^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}-[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$");
+    matchUser.comp("^[a-zA-Z0-9_.-]{1,31}$");
 #endif
     RegResult Rre;
 
@@ -341,6 +405,8 @@ int ipinstance::readIPMelangeList(const char *filename
             if (inet_aton(key.toCharArray(), &address)) {
                 iplist.push_back(ip(ntohl(address.s_addr), value.toInteger() - 1));
             }
+        } else if (matchUser.match(key.toCharArray(),Rre)) {
+			userlist.push_back(user(key.toCharArray(), value.toInteger() - 1));
         } else if (matchSubnet.match(key.toCharArray(),Rre)) {
             struct in_addr address;
             struct in_addr addressmask;
@@ -400,6 +466,7 @@ int ipinstance::readIPMelangeList(const char *filename
     std::cerr << thread_id << "starting sort" << std::endl;
 #endif
     std::sort(iplist.begin(), iplist.end());
+    std::sort(userlist.begin(), userlist.end());
 #ifdef DGDEBUG
     std::cerr << thread_id << "sort complete" << std::endl;
     std::cerr << thread_id << "ip list dump:" << std::endl;
@@ -407,6 +474,12 @@ int ipinstance::readIPMelangeList(const char *filename
     while (i != iplist.end()) {
         std::cerr << thread_id << "IP: " << i->addr << " Group: " << i->group << std::endl;
         ++i;
+    }
+    std::cerr << thread_id << "user list dump:" << std::endl;
+    std::vector<user>::const_iterator u = userlist.begin();
+    while (u != userlist.end()) {
+        std::cerr << thread_id << "User: " << u->name << " Group: " << u->group << std::endl;
+        ++u;
     }
     std::cerr << thread_id << "subnet list dump:" << std::endl;
     std::list<subnetstruct>::const_iterator j = ipsubnetlist.begin();
