$OpenBSD$
Index: src/ConnectionHandler.cpp
--- src/ConnectionHandler.cpp.orig
+++ src/ConnectionHandler.cpp
@@ -334,8 +334,13 @@ ConnectionHandler::connectUpstream(Socket &sock, Naugh
         cm.upfailure = false;
         if (cm.isdirect) {
             String des_ip;
-            if (cm.isiphost) {
-                des_ip = cm.urldomain;
+            if (cm.isiphost || !cm.sslproxy_ip.empty()) {
+                if (!cm.sslproxy_ip.empty()) {
+                    des_ip = cm.sslproxy_ip;
+                    port = cm.sslproxy_port;
+                } else {
+                    des_ip = cm.urldomain;
+                }
                 sock.setTimeout(o.connect_timeout);
 #ifdef DGDEBUG
                 std::cerr << thread_id << "Connecting to IPHost " << des_ip << " port " << port << std::endl;
@@ -647,6 +652,22 @@ int ConnectionHandler::handleConnection(Socket &peerco
 
             }
 //
+            checkme.sslproxy_ip = "";
+            checkme.sslproxy_port = 0;
+            String srcaddrport = header.parseSSLproxyLine();
+            if (!srcaddrport.empty()) {
+                // 127.0.0.1:34649,192.168.3.24:47286,s
+                checkme.sslproxy_ip = srcaddrport.before(":").toCharArray();
+                checkme.sslproxy_port = srcaddrport.after(":").before(",").toInteger();
+                clientip = srcaddrport.after(",").before(":").toCharArray();
+                peerconn.setActualPeerAddrPort(srcaddrport.after(",").before(":").toCharArray(), srcaddrport.after(",").after(":").before(",").toInteger());
+                checkme.is_ssl = (srcaddrport.after(",").after(",") == "s");
+            }
+
+            if (checkme.is_ssl && header.header.front().contains("http://")) {
+                header.header.front() = header.header.front().before("http://") + "https://" + header.header.front().after("http://");
+            }
+
             // do this normalisation etc just the once at the start.
             checkme.setURL(ismitm);
 
@@ -937,10 +958,12 @@ int ConnectionHandler::handleConnection(Socket &peerco
 
             if (checkme.isdirect) header.setDirect();
 
-            if (checkme.isbypass && !(checkme.isexception || checkme.iscookiebypass || checkme.isvirusbypass)) {
+            if (checkme.isbypass && (checkme.setbypasscookie || !(checkme.isexception || checkme.iscookiebypass || checkme.isvirusbypass))) {
 #ifdef DGDEBUG
                 std::cout << thread_id << "Setting GBYPASS cookie; bypasstimestamp = " << checkme.bypasstimestamp << __func__ << std::endl;
 #endif
+                checkme.setbypasscookie = false;
+
                 String ud(checkme.urldomain);
                 if (ud.startsWith("www.")) {
                     ud = ud.after("www.");
@@ -1730,7 +1753,7 @@ bool ConnectionHandler::genDenyAccess(Socket &peerconn
                             eheader = "HTTP/1.1 200 \r\n";
                         }
                         if (headersent < 2) {
-                            eheader += "Content-type: text/html\n\n";
+                            eheader += "Content-type: text/html\r\n\r\n";
                         }
                         // if the header has been sent then likely displaying the
                         // template will break the download, however as this is
@@ -2261,7 +2284,7 @@ bool ConnectionHandler::getdnstxt(std::string &clienti
     // get info from DNS
     union {
         HEADER hdr;
-        u_char buf[NS_PACKETSZ];
+        u_char buf[PACKETSZ];
     } response;
     int responseLen;
     ns_msg handle; /* handle for response message */
@@ -2805,6 +2828,7 @@ bool ConnectionHandler::checkByPass(NaughtyFilter &che
             header.chopBypass(checkme.logurl, checkme.isvirusbypass);
             if (checkme.bypasstimestamp > 1) { // not expired
                 checkme.isbypass = true;
+                checkme.setbypasscookie = true;
                 checkme.isexception = true;
                 // checkme: need a TR string for virus bypass
                 checkme.exceptionreason = o.language_list.getTranslation(606);
