$OpenBSD$
--- src/ConnectionHandler.cpp.orig	Mon Mar 13 18:05:36 2017
+++ src/ConnectionHandler.cpp	Thu Sep 28 10:53:21 2017
@@ -547,11 +547,23 @@ int ConnectionHandler::handleConnection(Socket &peerco
                 checkme.reset();
             }
 
+            is_ssl = header.requestType().startsWith("CONNECT");
+
+            String srcaddrport = header.getSSLproxyLine();
+            if (!srcaddrport.empty()) {
+                clientip = srcaddrport.before(":").toCharArray();
+                peerconn.setActualPeerAddrPort(srcaddrport.before(":").toCharArray(), srcaddrport.after(":").before(",").toInteger());
+                is_ssl = ismitm = (srcaddrport.after(",") == "s");
+            }
+
+            if (is_ssl && header.header.front().contains("http://")) {
+                header.header.front() = header.header.front().before("http://") + "https://" + header.header.front().after("http://");
+            }
+
             url = header.getUrl(false, ismitm);
             logurl = header.getLogUrl(false, ismitm);
             urld = header.decode(url);
             urldomain = url.getHostname();
-            is_ssl = header.requestType().startsWith("CONNECT");
 
             //If proxy connction is not persistent...
             if (!persistProxy) {
@@ -584,7 +596,7 @@ int ConnectionHandler::handleConnection(Socket &peerco
             }
 
 #ifdef DGDEBUG
-            std::cerr << "PID: " << getpid() << " Start URL " << url.c_str() << "is_ssl=" << is_ssl << "ismitm=" << ismitm << std::endl;
+            std::cerr << "PID: " << getpid() << " Start URL " << url.c_str() << " is_ssl=" << is_ssl << " ismitm=" << ismitm << std::endl;
 #endif
 
             // checks for bad URLs to prevent security holes/domain obfuscation.
@@ -2359,6 +2371,16 @@ int ConnectionHandler::handleConnection(Socket &peerco
                     std::cout << dbgPeerPort << " -header says close, so not persisting" << std::endl;
 #endif
 
+                off_t cl = docheader.contentLength();
+                String temp(docheader.header.front().after(" "));
+                if (cl > 0  && temp.startsWith("304")) {
+                    docbody.in(&proxysock, &peerconn, &header, &docheader, false, &headersent);
+                    docheader.setContentLength(0);
+#ifdef DGDEBUG
+                    std::cout << dbgPeerPort << " -Got 304 body from proxy and discarded it" << std::endl;
+#endif
+                }
+
                 // if we're not careful, we can end up accidentally setting the bypass cookie twice.
                 // because of the code flow, this second cookie ends up with timestamp 0, and is always disallowed.
                 if (isbypass && !isvirusbypass && !iscookiebypass && !isexception) {
@@ -2390,7 +2412,7 @@ int ConnectionHandler::handleConnection(Socket &peerco
                 // don't even bother scan testing if the content-length header indicates the file is larger than the maximum size we'll scan
                 // - based on patch supplied by cahya (littlecahya@yahoo.de)
                 // be careful: contentLength is signed, and max_content_filecache_scan_size is unsigned
-                off_t cl = docheader.contentLength();
+                cl = docheader.contentLength();
                 if (!responsescanners.empty()) {
                     if (cl == 0)
                         responsescanners.clear();
